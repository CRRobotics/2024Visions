import numpy as np

TAG_FAMILY = "tag36h11"
MARGIN_THRESHOLD = 40
DECODE_SHARPENING=.25
REFINE_EDGES=1
QUAD_DECIMATE = 1
QUAD_SIGMA=0
NTHREADS=1
LOG_PATH = "/home/crr/2024Visions/pose_estimation_pyapriltags/log.csv"
ALT_LOG_PATH = "/home/crr/2024Visions/pose_estimation_pyapriltags/log_after_center.csv"


PIXEL_MARGIN = 7

SERVER = "10.6.39.2"

CAMERA_CONSTANTS = {
    0: {
        "matrix":np.array([
        [1062.4294070176832, 0.0, 659.24877589952052],
        [0.0, 1062.4294070176832, 369.33219087336823],
        [0.0, 0.0, 1.0]
        ]),
        "distortion":np.array([
            [
            .055656123864839833,
            0,
            0,
            0,
            -.11025598404280015
            ]
        ]),
        "yc": 0, #Y coordinate to center of robot. (meters I believe)
        "xc": 0, #X coordinate to center of robot. (meters I believe)
        "thetar": 0 # Rotation to center of robot.
    },
    2: {
        "matrix":np.array([
        [1056.7997734244436, 0.0, 630.87407868060438],
        [0.0, 1056.7997734244436, 421.30564581242407],
        [0.0, 0.0, 1.0]
        ]),
        "distortion":np.array([
            [
            0.0071127134351176777,
            -0.12054203331230241,
            0,
            0,
            0.0071234992522144713
            ]
        ]),
        "yc": 0, #Y coordinate to center of robot. (meters I believe)
        "xc": 0, #X coordinate to center of robot. (meters I believe)
        "thetar": 0 # Rotation to center of robot.
    },
    4: {
        "matrix":np.array([
        [6254.9725146650326, 0.0, 530.51506885862818],
        [0.0, 6254.9725146650326, 370.79989006526603],
        [0.0, 0.0, 1.0]
        ]),
        "distortion":np.array([
            [
            -12.307616865384897,
            234.27807348788966,
            0,
            0,
            -3382.3506940723159
            ]
        ]),
        "yc": 0.3175,
        "xc": -.2667, #.145 for kitbot, -.105 for duckbot
        "thetar": 0
    },
    6: {
        "matrix":np.array([
        [2.2234011998425340e+03, 0.0, 5.9307274863919463e+02],
        [0.0, 2.2234011998425340e+03, 4.5882071745903039e+02],
        [0.0, 0.0, 1.0]
        ]),
        "distortion":np.array([
            [
            -1.3169395224055627e-01,
            -5.8826545236253835e-01,
            -7.2811936123977057e-04,
            6.3369233789708429e-03,
            5.7274444996201934e-01
            ]
        ]),
        "yc": 0, #Y coordinate to center of robot. (meters I believe)
        "xc": 0, #X coordinate to center of robot. (meters I believe)
        "thetar": 0 # Rotation to center of robot.
    },
    8: {
        "matrix":np.array([
        [1.0556714314149651e+03, 0.0, 6.2850650510683784e+02],
        [0.0, 1.0556714314149651e+03, 4.1573899729130790e+02],
        [0.0, 0.0, 1.0]
        ]),
        "distortion":np.array([
            [
            8.6024487017995532e-02,
            -1.2652086185680320e-01,
            0,
            0,
            7.0161275193120931e-02
            ]
        ]),
        "yc": 0, #Y coordinate to center of robot. (meters I believe)
        "xc": 0, #X coordinate to center of robot. (meters I believe)
        "thetar": 0 # Rotation to center of robot.
    },
    10: {
        "matrix":np.array([
        [1.0329352637486377e+03, 0.0, 6.2528318956275405e+02],
        [0.0, 1.0329352637486377e+03, 4.0138837999803440e+02],
        [0.0, 0.0, 1.0]
        ]),
        "distortion":np.array([
            [
            7.1068471021371524e-02,
            -8.6352712048392691e-02,
            0,
            0,
            2.4286560390510897e-02
            ]
        ]),
        "yc": 0, #Y coordinate to center of robot. (meters I believe)
        "xc": 0, #X coordinate to center of robot. (meters I believe)
        "thetar": 0 # Rotation to center of robot.
    }
}

##apriltag positions. counter-clockwise (lb, rb, rt, lt). 4 corner coordinates (xyz)
ID_POS = {
    1: np.array([
        [15.1509624, 0.287147, 1.273302],
        [15.0079816, 0.204597, 1.273302],
        [15.0079816, 0.204597, 1.438402],
        [15.1509624, 0.287147, 1.438402],
        #[15.079472, 0.245872, 1.355852]
    ]),
    2: np.array([
        [16.2566244, 0.924941, 1.273302],
        [16.1136436, 0.842391, 1.273302],
        [16.1136436, 0.842391, 1.438402],
        [16.2566244, 0.924941, 1.438402],
        #[16.185134, 0.883666, 1.355852]
    ]),
    3: np.array([
        [16.579342, 5.065268, 1.368552],
        [16.579342, 4.900168, 1.368552],
        [16.579342, 4.900168, 1.533652],
        [16.579342, 5.065268, 1.533652],
        #[16.579342, 4.982718, 1.451102]
    ]),
    4: np.array([
        [16.579342, 5.630418, 1.368552],
        [16.579342, 5.465318, 1.368552],
        [16.579342, 5.465318, 1.533652],
        [16.51320685, 5.597270879, 1.533652],
        #[16.579342, 5.547868, 1.451102]
    ]),
    5: np.array([
        [14.618208, 8.2042, 1.273302],
        [14.783308, 8.2042, 1.273302],
        [14.783308, 8.2042, 1.438402],
        [14.618208, 8.2042, 1.438402],
        #[14.700758, 8.2042, 1.355852]
    ]),
    6: np.array([
        [1.75895, 8.2042, 1.273302],
        [1.92405, 8.2042, 1.273302],
        [1.92405, 8.2042, 1.438402],
        [1.75895, 8.2042, 1.438402],
        #[1.8415, 8.2042, 1.355852]
    ]),
    7: np.array([
        [-0.0381, 5.465318, 1.368552],
        [-0.0381, 5.630418, 1.368552],
        [-0.0381, 5.630418, 1.533652],
        [-0.0381, 5.465318, 1.533652],
        #[-0.0381, 5.547868, 1.451102]
    ]),
    8: np.array([
        [-0.0381, 4.900168, 1.368552],
        [-0.0381, 5.065268, 1.368552],
        [-0.0381, 5.065268, 1.533652],
        [-0.0381, 4.900168, 1.533652],
        #[-0.0381, 4.982718, 1.451102]
    ]),
    9: np.array([
        [0.4275983971, 0.842391, 1.273302],
        [0.2846176029, 0.924941, 1.273302],
        [0.2846176029, 0.924941, 1.438402],
        [0.4275983971, 0.842391, 1.438402],
        #[0.356108, 0.883666, 1.355852]
    ]),
    10: np.array([
        [1.533006397, 0.204597, 1.273302],
        [1.390025603, 0.287147, 1.273302],
        [1.390025603, 0.287147, 1.438402],
        [1.533006397, 0.204597, 1.438402],
        #[1.461516, 0.245872, 1.355852]
    ]),
    11: np.array([
        [11.8332356, 3.671951, 1.23825],
        [11.9762164, 3.754501, 1.23825],
        [11.9762164, 3.754501, 1.40335],
        [11.8332356, 3.671951, 1.40335],
        #[11.904726, 3.713226, 1.3208]
    ]),
    12: np.array([
        [11.9762164, 4.457065, 1.23825],
        [11.8332356, 4.539615, 1.23825],
        [11.8332356, 4.539615, 1.40335],
        [11.9762164, 4.457065, 1.40335],
        #[11.904726, 4.49834, 1.3208]
    ]),
    13: np.array([
        [11.220196, 4.187698, 1.23825],
        [11.220196, 4.022598, 1.23825],
        [11.220196, 4.022598, 1.40335],
        [11.220196, 4.187698, 1.40335],
        #[11.220196, 4.105148, 1.3208]
    ]),
    14: np.array([
        [5.320792, 4.022598, 1.23825],
        [5.320792, 4.187698, 1.23825],
        [5.320792, 4.187698, 1.40335],
        [5.320792, 4.022598, 1.40335],
        #[5.320792, 4.105148, 1.3208]
    ]),
    15: np.array([
        [4.712832397, 4.539615, 1.23825],
        [4.569851603, 4.457065, 1.23825],
        [4.569851603, 4.457065, 1.40335],
        [4.712832397, 4.539615, 1.40335],
        #[4.641342, 4.49834, 1.3208]
    ]),
    16: np.array([
        [4.569851603, 3.754501, 1.23825],
        [4.712832397, 3.671951, 1.23825],
        [4.712832397, 3.671951, 1.40335],
        [4.569851603, 3.754501, 1.40335],
        # [4.641342, 3.713226, 1.3208]
    ])
}